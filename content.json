{"pages":[{"title":"About me","text":"徐奕峰 YiFeng(Eephone) XuFullstack Developer of Geographic Information System(Science) Shenzhen, Canton, China | +86 13510500103sheeyphone@gmail.com | 331659009@qq.comhttps://github.com/sheeyphoneSummaryBalabalabala Personal ExperienceLead Software Engineer balabalabala… EducationSkillsCertifications “Everything is related to everything else, but near things are more related than distant things.” – Waldo Tobler","link":"/about/me.html"}],"posts":[{"title":"Introduce how to import GeoJSON data into MongoDB","text":"Outline Get ready for your GeoJSON data Convert GeoJSON data to JsonArray data for importation Use MongoDB command line tool to import data Finally, import the data successfully and find them Tutorial1. Get ready for your GeoJSON data GeoJSON is a format for encoding a variety of geographic data structures. A GeoJSON object may represent a geometry, a feature, or a collection of features. GeoJSON supports the following geometry types: Point, LineString, Polygon, MultiPoint, MultiLineString, MultiPolygon, and GeometryCollection. The codes below demonstrate a simple GeoJSON file, which is constructed with 4-point features. You could copy the text and paste into your text editor and save it with the .geojson suffix, and load the file you saved into a GIS application like QGIS or ArcMap. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182{ &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;name&quot;: &quot;earthquakes&quot;, &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:OGC:1.3:CRS84&quot; } }, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: { &quot;DateTime&quot;: &quot;1970/01/04 17:00:40.20&quot;, &quot;Latitude&quot;: 24.139, &quot;Longitude&quot;: 102.503, &quot;Depth&quot;: 31.0, &quot;Magnitude&quot;: 7.5, &quot;MagType&quot;: &quot;Ms&quot;, &quot;NbStations&quot;: 90, &quot;Gap&quot;: null, &quot;Distance&quot;: null, &quot;RMS&quot;: 0.0, &quot;Source&quot;: &quot;NEI&quot;, &quot;EventID&quot;: 1970010440 }, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [102.503, 24.139] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: { &quot;DateTime&quot;: &quot;1970/01/06 05:35:51.80&quot;, &quot;Latitude&quot;: -9.628, &quot;Longitude&quot;: 151.458, &quot;Depth&quot;: 8.0, &quot;Magnitude&quot;: 6.2, &quot;MagType&quot;: &quot;Ms&quot;, &quot;NbStations&quot;: 85, &quot;Gap&quot;: null, &quot;Distance&quot;: null, &quot;RMS&quot;: 0.0, &quot;Source&quot;: &quot;NEI&quot;, &quot;EventID&quot;: 1970010640 }, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [151.458, -9.628] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: { &quot;DateTime&quot;: &quot;1970/01/08 17:12:39.10&quot;, &quot;Latitude&quot;: -34.741, &quot;Longitude&quot;: 178.568, &quot;Depth&quot;: 179.0, &quot;Magnitude&quot;: 6.1, &quot;MagType&quot;: &quot;Mb&quot;, &quot;NbStations&quot;: 59, &quot;Gap&quot;: null, &quot;Distance&quot;: null, &quot;RMS&quot;: 0.0, &quot;Source&quot;: &quot;NEI&quot;, &quot;EventID&quot;: 1970010840 }, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [178.568, -34.741] } }, { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: { &quot;DateTime&quot;: &quot;1970/01/10 12:07:08.60&quot;, &quot;Latitude&quot;: 6.825, &quot;Longitude&quot;: 126.737, &quot;Depth&quot;: 73.0, &quot;Magnitude&quot;: 6.1, &quot;MagType&quot;: &quot;Mb&quot;, &quot;NbStations&quot;: 91, &quot;Gap&quot;: null, &quot;Distance&quot;: null, &quot;RMS&quot;: 0.0, &quot;Source&quot;: &quot;NEI&quot;, &quot;EventID&quot;: 1970011040 }, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [126.737, 6.825] } } ]} 2. Convert GeoJSON data to JsonArray data for importationThe key thing to importing GeoJSON data into Mongodb is the file conversion from GeoJSON to JsonObject or JsonArray. In addition, there are a lot of ways to do so, but, I want to tell you the best way by using a tool called jq. ( jq Official Website here!) When you finish your download, you could do the conversion by using the command below. Importantly, you must put your own configuration text to replace the text between the square brackets and remove the square brackets finally. Then, try it yourself. 1jq --compact-output &quot;.features&quot; '[Your GeoJSON File]' &gt; '[GeoJSON File converted]' 3. Use mongodb command line tool to import dataIn this step, you should check your system environment config and make sure the MongoDB client or command line tools have been installed well firstly. Then, you could use the command below and replace the content between square brackets as you do well in the previous step. 1mongoimport -u '[Your MongoDB User]' --password '[Your Password]' --db '[Database to Import]' -c '[Collection to Import]' --file '[Path to Your GeoJSON File]' --jsonArray '[MongoDB Connection String]' Here is the positive result that tells you which MongoDB has been connected and how many documents have been imported. 12connected to: mongodb://***********4 document(s) imported successfully. 0 document(s) failed to import. 4. Finally, import the data successfully and find themUse MongoDB Client to find or query the data from the collection you have created. And, here is the result. References &amp; DocumentationsGeoJSON Documentationhttps://geojson.org/geojson-spec MongoDB geospatialhttps://www.mongodb.com/docs/manual/geospatial-queries/#std-label-geospatial-geojson jq-tools Offical Websitehttps://stedolan.github.io/jq/","link":"/2023/02/22/p20230222/"},{"title":"A simple way to import raster data into the PostGIS database","text":"Outline Installing the PostGIS Database Enabling the raster extension in PostGIS Preparing or creating the raster data Knowing about the Raster WKB/WKT format Creating the importation-SQL file to execute Tutorial1. Installing the PostGIS DatabaseThe easiest way to install the PostGIS database is using Docker, or you could choose another way to install it. Hence, install the Docker environment and docker-compose plugin on your computer, and here, the hyperlink below is the tutorial and documentation of how to install Docker. Docker Engine installation overview | Docker Documentation Whether the Docker has already installed, you could use docker-compose to run the database by configuring the docker-compose.yml file. The configuration file example is below the paragraph. 12345678910111213141516171819202122version: &quot;3.7&quot;services: pgdb: image: &quot;postgis/postgis:15-master&quot; container_name: pgdb restart: always environment: POSTGRES_DB: gis_data POSTGRES_USER: xyf POSTGRES_PASSWORD: xyf TZ: Asia/Shanghai volumes: - &quot;/data/postgis/data/:/var/lib/postgresql/data/&quot; - &quot;/data/postgis/tmp/:/tmp&quot; ports: - &quot;5432:5432&quot; networks: - &quot;enet&quot;networks: enet: name: &quot;enet&quot; external: true Once you have done it and the PostGIS database has been running well, you could make a connection to the database, using the DBMS application such as DBeaver or GIS application addressed QGIS. 2. Enabling the raster extension in PostGISThere are a few extensions supported by PostGIS spatial engine. The default running configuration shows that 3 of these extensions have been enabled. But it was unfortunate to say the raster extension is not enabled by default way. So we should switch on it by ourselves.The first step is to make your command line jump into the docker container, which is the database container you have created before. 1sudo docker exec -it pgdb /bin/bash After entering the container bash, you could connect to the database by using the command line tool that Postgres offered and named ‘psql’. It’s pretty easy to do. In addition, here are some explanations about the parameters. ‘-U’ is the user and ‘-d’ is the database name. I hope you could find it in the docker-compose configuration file that we have mentioned before. 1psql -U xyf -d gis_data After you finish your connection, I would say ‘Congratulation!’ to you and give you the instruction for the next step. These three SQL commands below will help you to enable the postgis_raster extension, and the gdal_drivers and query the status of the available extensions. You would see the result of your query formed as a table heading the name, default_version and installed_version. So easy, isn’t it? Make sure the installed_version of postgis_raster, yes the column is not NULL. 1234CREATE EXTENSION postgis_raster;SET postgis.gdal_enabled_drivers = 'ENABLE_ALL';SELECT name, default_version,installed_version FROM pg_available_extensions WHERE name LIKE 'postgis%' or name LIKE 'address%'; 3. Preparing or creating the raster dataI’m sure that you are sure that one of the key steps we should do before importing raster data into the database is owing the raster data. Haha, if you don’t have your own raster data. You could create it using QGIS with the tools called Interpolation or so on. Then, export it into the GeoTiff format and copy or move the GeoTiff file you exported to the file path you have configured on docker-compose.yml and go through our next step. Suggestions: DO NOT MAKE A LARGE RASTER DATA OR YOU WOULD CRY ON IT! 4. Knowing about the Raster WKB/WKT formatHow does the PostGIS database store the raster data? It’s a pretty good question. As we know that PostGIS store the vector data with data type ‘geometry_column’ or ‘geom’. And the way to store raster data is familiar with it, demonstrating a new data type called ‘raster’ or ‘rast’. When you make a selection by querying some raster data on a database. You would see the HEX result looks like ‘01000001CDDB….’ and it is the WKB/WKT data format of a raster. About all, the key to importing raster data into the PostGIS database is converting your own raster data into WKB/WKT raster format. You may find out the attributes of Raster WKB/WKT by clicking the link below.WKTRaster/Documentation01 – PostGIS (osgeo.org) 5. Creating the importation-sql file to executeI would say it’s much more convenient to make the conversion by using the script or tool that PostGIS has already done before, named ‘raster2pgsql’. You could find the usage of ‘raster2pgsql’ via the command ‘raster2pgsql’ after we jump into the container in which the database is running on it. We should find out and reach the path where the testing GeoTiff is waiting for us. 1raster2pgsql -s 4326 -I -C /tmp/test.tif nc.test_raster &gt; test.sql We may specify the SRID of our raster in the progress, and the example illustrates the parameter with ‘-s 4326’. You could get the explanations about parameters ‘-I’ and ‘-C’ by yourself. ‘/tmp/test.tif’ is the file path of your GeoTiff file. ‘nc.test_raster’ shows the schema with ‘nc’ and the table name is ‘test_raster’. Finally, the SQL file would be created into the path you running this command and named test.sql. 1234567BEGIN;CREATE TABLE &quot;nc&quot;.&quot;test_raster&quot; (&quot;rid&quot; serial PRIMARY KEY,&quot;rast&quot; raster);INSERT INTO &quot;nc&quot;.&quot;test_raster&quot; (&quot;rast&quot;) VALUES ('010000010019CC5D8DE459B93F14F061B29570B9BFD174763238005C403E7799994DC0374000000000000000000000000000000000E610000029001A004B000000008087C3C0F355F2B1BB1C394014ED2AA4FC3C39409A780778D25E394016FC36C478813940B1FB8EE1B1A339407714E7A8A3C33940FA4674CFBADE3940111B2C9CA4F13940DAE3857478F839402CF180B229EF3940EB724A404CD23940778192020BA0394083A7902BF55......'::raster);CREATE INDEX ON &quot;nc&quot;.&quot;test_raster&quot; USING gist (st_convexhull(&quot;rast&quot;));ANALYZE &quot;nc&quot;.&quot;test_raster&quot;;SELECT AddRasterConstraints('nc','test_raster','rast',TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE);END; You could execute this SQL script using DBeaver, and the ‘nc.test_raster’ would be imported into the database, or you visual it by using QGIS, connecting the database and dropping it into the layers panel. That’s all. References &amp; Documentationsraster2pgsql https://postgis.docs.acugis.com/en/latest/components/raster2pgsql/index.html#documentation using_raster_dataman https://postgis.net/docs/using_raster_dataman.html#RT_Raster_Loader docker_hub_postgis https://hub.docker.com/r/postgis/postgis WKTRaster https://trac.osgeo.org/postgis/wiki/WKTRaster/Documentation01","link":"/2023/02/26/p20230226/"}],"tags":[{"name":"GIS","slug":"GIS","link":"/tags/GIS/"},{"name":"GeoJSON","slug":"GeoJSON","link":"/tags/GeoJSON/"},{"name":"MongoDB","slug":"MongoDB","link":"/tags/MongoDB/"},{"name":"Data importation","slug":"Data-importation","link":"/tags/Data-importation/"},{"name":"PostGIS","slug":"PostGIS","link":"/tags/PostGIS/"},{"name":"Raster","slug":"Raster","link":"/tags/Raster/"},{"name":"Database","slug":"Database","link":"/tags/Database/"}],"categories":[]}